name: openwrtbuild

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择源码分支"
        required: true
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - lede-master
          - immortalwrt-v24.10.1
          - Lienol-master

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -y update
          sudo apt-get -y install $(curl -fsSL https://raw.githubusercontent.com/ophub/amlogic-s9xxx-openwrt/main/.github/workflows/scripts/depend-openwrt-ubuntu2204)
          sudo timedatectl set-timezone "${TZ}"

      - name: 设置工作目录
        run: |
          WORKDIR_PATH="${{ github.workspace }}/workdir"
          echo "WORKDIR_PATH=${WORKDIR_PATH}" >> $GITHUB_ENV
          mkdir -p ${WORKDIR_PATH}
          echo "WORKSPACE_PATH=${{ github.workspace }}" >> $GITHUB_ENV

      - name: 缓存工具链
        uses: actions/cache@v3
        id: toolchain-cache
        with:
          path: |
            ${{ env.WORKDIR_PATH }}/openwrt/dl
            ${{ env.WORKDIR_PATH }}/openwrt/staging_dir
          key: ${{ runner.os }}-toolchain-${{ inputs.source_branch }}-${{ hashFiles('config/${{ inputs.source_branch }}/*') }}
          restore-keys: |
            ${{ runner.os }}-toolchain-${{ inputs.source_branch }}-

      - name: 克隆源码 [${{ inputs.source_branch }}]
        run: |
          WORKDIR_PATH="${{ env.WORKDIR_PATH }}"
          WORKSPACE_PATH="${{ env.WORKSPACE_PATH }}"
          
          declare -A repo_map
          repo_map["openwrt-main"]="https://github.com/openwrt/openwrt main official"
          repo_map["lede-master"]="https://github.com/coolsnowwolf/lede master lede"
          repo_map["immortalwrt-v24.10.1"]="https://github.com/immortalwrt/immortalwrt v24.10.1 immortalwrt"
          repo_map["Lienol-master"]="https://github.com/Lienol/openwrt 22.03 Lienol"
          
          repo_info=${repo_map[${{ inputs.source_branch }}]}
          if [ -z "$repo_info" ]; then
            echo "❌ 未知的源码仓库"
            exit 1
          fi
          
          read repo_url repo_branch tags_name <<< "$repo_info"
          
          git clone --depth=1 --branch="$repo_branch" "$repo_url" "${WORKDIR_PATH}/openwrt"
          ln -sf "${WORKDIR_PATH}/openwrt" "${WORKSPACE_PATH}/openwrt"
          echo "BUILD_TAG=OpenWrt_${tags_name}_$(date +'%Y.%m')" >> $GITHUB_ENV

      - name: 加载自定义配置
        run: |
          if [ -f "${FEEDS_CONF}" ]; then 
            cp -f "${FEEDS_CONF}" "${WORKDIR_PATH}/openwrt/feeds.conf.default"
          fi
          
          if [ -f "${DIY_P1_SH}" ]; then
            chmod +x "${DIY_P1_SH}"
            cd "${WORKDIR_PATH}/openwrt"
            "${GITHUB_WORKSPACE}/${DIY_P1_SH}"
          fi

      - name: 更新软件源
        run: |
          cd "${WORKDIR_PATH}/openwrt"
          ./scripts/feeds update -a

      - name: 安装软件包
        run: |
          cd "${WORKDIR_PATH}/openwrt"
          ./scripts/feeds install -a

      - name: 应用配置
        run: |
          if [ -d "files" ]; then
            mv -f files "${WORKDIR_PATH}/openwrt/files"
          fi
          
          if [ -f "${CONFIG_FILE}" ]; then
            cp -f "${CONFIG_FILE}" "${WORKDIR_PATH}/openwrt/.config"
          fi
          
          if [ -f "${DIY_P2_SH}" ]; then
            chmod +x "${DIY_P2_SH}"
            cd "${WORKDIR_PATH}/openwrt"
            "${GITHUB_WORKSPACE}/${DIY_P2_SH}"
          fi

      - name: 下载依赖
        run: |
          cd "${WORKDIR_PATH}/openwrt"
          make defconfig
          make download -j$(nproc)
          find dl -size -1024c -delete

      - name: 编译固件
        run: |
          cd "${WORKDIR_PATH}/openwrt"
          make -j$(($(nproc) + 1)) || make -j1 V=s
          echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
          [ -n "$DEVICE_NAME" ] && echo "DEVICE_NAME=_$DEVICE_NAME" >> $GITHUB_ENV

      - name: 整理固件
        id: organize
        run: |
          cd "${WORKDIR_PATH}/openwrt/bin/targets"
          target_dir=$(find . -mindepth 2 -maxdepth 2 -type d | head -1)
          rm -rf "${target_dir}/packages"
          echo "FIRMWARE_PATH=${PWD}/${target_dir}" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}

      - name: 创建发布版本
        id: release
        if: success()
        run: |
          tag_name=$(date +"%Y.%m.%d-%H%M")
          echo "RELEASE_TAG=$tag_name" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 发布固件
        uses: softprops/action-gh-release@v2
        if: steps.release.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ### OpenWrt 固件信息
            - 默认IP: 192.168.1.1
            - 用户名: root
            - 密码: password
            - WIFI名称: OpenWrt
            - 安装指南: 系统 → Amlogic服务 → 安装OpenWrt
